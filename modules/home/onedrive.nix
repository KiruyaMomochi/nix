# TODO: Configure auto resync.
#       When modify any of the following configuration items, you will be required to perform
#       a --resync to ensure your client is syncing your data with the updated configuration:
#       - sync_dir
#       - skip_dir
#       - skip_file
#       - drive_id
#       - Modifying sync_list
#       - Modifying business_shared_folders

{ config, pkgs, lib, ... }:
let
  cfg = config.programs.onedrive;
  servicesCfg = config.services.onedrive;
  formatValue = v:
    if lib.isBool v then (if v then "true" else "false")
    else if lib.isList v then (lib.concatStringsSep "|" v)
    else toString v;
  formatLine = k: v: ''${k} = "${formatValue v}"'';
  upstreamSystemdUnit = name: pkgs.runCommand name
    {
      prefix = pkgs.onedrive;
    }
    ''
      substituteAll "${pkgs.onedrive.src}/contrib/systemd/${name}.in" $out
    '';
in
{
  imports = [ ];

  options.programs.onedrive = {
    enable = lib.mkEnableOption "OneDrive";
    syncList = lib.mkOption {
      type = lib.types.nullOr (lib.types.listOf lib.types.str);
      default = null;
      example = [
        # Exclude temp folders under Documents
        "!Documents/Temp"
        # Includes Documents folder
        "Documents"
      ];
      description = ''
        List of directories to sync. Each element represents a relative path from the sync_dir.
        All files and directories not matching any line of the file will be skipped during all operations.
      '';
    };

    settings = lib.mkOption {
      type = lib.types.submodule {
        freeformType = with lib.types; attrsOf (oneOf [ bool int str ]);
        # freeformType = settingsFormat.type;

        options = {
          sync_dir = lib.mkOption {
            type = lib.types.str;
            default = "${config.home.homeDirectory}/OneDrive";
            description = "The directory where OneDrive will place your files.";
          };
          skip_dir = lib.mkOption {
            type = with lib.types; nullOr (listOf str);
            default = null;
            example = [ "~*" ".~*" "*.tmp" ];
            description = ''
              This option is used to 'skip' certain directories and supports pattern matching.
              Patterns are case insensitive. * and ? wildcards characters are supported. Use | to separate multiple patterns.
            '';
          };
          skip_file = lib.mkOption {
            type = with lib.types; nullOr (listOf str);
            default = null;
            example = [ "~*" ".~*" "*.tmp" "*.swp" ];
            description = ''
              This option is used to 'skip' certain files and supports pattern matching.
              Patterns are case insensitive. * and ? wildcards characters are supported. Use | to separate multiple patterns.

              Files can be skipped in the following fashion:
              - Specify a wildcard, eg: '*.txt' (skip all txt files)
              - Explicitly specify the filename and it's full path relative to your sync_dir, eg: 'path/to/file/filename.ext'
              - Explicitly specify the filename only and skip every instance of this filename, eg: 'filename.ext'

              By default, the following files will be skipped:
              - Files that start with ~
              - Files that start with .~ (like .~lock.* files generated by LibreOffice)
              - Files that end in .tmp

              Important: Do not use a skip_file entry of .* as this will prevent correct searching of local changes to process.
            '';
          };
          skip_dotfiles = lib.mkOption {
            type = lib.types.bool;
            default = true;
            description = "Skip files and directories that start with a period.";
          };
        };
      };
      default = { };
      example = {
        sync_dir = "${config.home.homeDirectory}/OneDrive";
        skip_dotfiles = true;
      };
      description = ''
        Configuration for OneDrive.
        See <link xlink:href="https://github.com/abraunegg/onedrive/blob/master/docs/USAGE.md"/> for supported values.
      '';
    };

  };

  options.services.onedrive = {
    enable = lib.mkEnableOption "OneDrive";
  };

  config.home.packages = lib.mkIf cfg.enable [ pkgs.onedrive ];
  config.xdg.configFile = lib.mkMerge
    [
      (lib.mkIf cfg.enable {
        "onedrive/config" = {
          text = lib.concatStringsSep "\n" (
            lib.mapAttrsToList formatLine (
              lib.filterAttrs (k: v: v != null) cfg.settings
            )
          );
        };
        "onedrive/sync_list" = lib.mkIf (cfg.syncList != null) {
          text = lib.concatStringsSep "\n" cfg.syncList;
        };
      })

      (lib.mkIf (servicesCfg.enable && pkgs.stdenv.isLinux && config.home.username != "root") {
        "systemd/user/onedrive.service" = {
          source = upstreamSystemdUnit "onedrive.service";
        };
        "systemd/user/onedrive@.service" = {
          source = upstreamSystemdUnit "onedrive@.service";
        };
        "systemd/user/default.target.wants/onedrive.service" = {
          source = config.xdg.configFile."systemd/user/onedrive.service".source;
        };
      })
    ];
}
